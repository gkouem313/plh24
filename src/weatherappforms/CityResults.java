/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package weatherappforms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.City;
import model.CityJpaController;
import model.City_;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;



/**
 *
 * @author anton
 */
public class CityResults extends javax.swing.JFrame {
    private String selectedCity;


    /**
     * Creates new form CityResults
     */
    public CityResults() {
        initComponents();
    }
    public CityResults(String selectedCity) {
        initComponents();
        if (selectedCity != null && !selectedCity.isEmpty()) {
        // Convert the first character to uppercase and the rest to lowercase
        this.selectedCity = selectedCity.substring(0, 1).toUpperCase() + selectedCity.substring(1).toLowerCase();
    } else {
        this.selectedCity = selectedCity; 
    }
    System.out.println("selectedCity: " + this.selectedCity); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 176, 255));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", "", "", null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "areaName", "temp_C", "humidity", "windspeedKmph", "uvIndex", "weatherDesc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(40);
        jScrollPane3.setViewportView(jTable2);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/weatherappforms/architecture-and-city.png"))); // NOI18N
        jLabel1.setText("CityResults");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/weatherappforms/weather-forecast.png"))); // NOI18N
        jLabel2.setText("WeatherNow");

        jButton1.setText("Save2Base");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("EditCityData");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("DeleteCityDataFromBase");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Show");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(380, 380, 380)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jButton4)
                .addGap(17, 17, 17)
                .addComponent(jButton1)
                .addGap(17, 17, 17)
                .addComponent(jButton2)
                .addGap(17, 17, 17)
                .addComponent(jButton3))
        );

        setSize(new java.awt.Dimension(752, 371));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                                                      
    String urlToCall = "https://wttr.in/" + this.selectedCity + "?format=j1";
    System.out.println("urlToCall" + urlToCall);
    OkHttpClient client = new OkHttpClient();
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    model.setRowCount(0); // Clear existing data

    Request request = new Request.Builder().url(urlToCall).build();

    try (Response response = client.newCall(request).execute()) {
        if (response.isSuccessful() && response.body() != null) {
            String responseString = response.body().string();
            System.out.println("responseString"+ responseString);
            Gson gson = new Gson();
            JsonObject json = gson.fromJson(responseString, JsonObject.class);

            JsonObject currentCondition = json.getAsJsonArray("current_condition").get(0).getAsJsonObject();           
            String temp_C = currentCondition.get("temp_C").getAsString();
            String humidity = currentCondition.get("humidity").getAsString();
            String windspeedKmph = currentCondition.get("windspeedKmph").getAsString();
            String uvIndex = currentCondition.get("uvIndex").getAsString();
            String weatherDesc = currentCondition.getAsJsonArray("weatherDesc").get(0).getAsJsonObject().get("value").getAsString();
            String areaName = json.getAsJsonArray("nearest_area").get(0).getAsJsonObject().getAsJsonArray("areaName").get(0).getAsJsonObject().get("value").getAsString();          
            
            model.addRow(new Object[]{areaName,temp_C, humidity, windspeedKmph, uvIndex, weatherDesc});
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    
    jTable2.setModel(model); 

        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    //Button Αποθήκευση
    //Entity Manager
    //EntityManagerFactory emf = Persistence.createEntityManagerFactory("WeatherAppPU");
    //Δημιουργία του EntityManager
    //EntityManager em = emf.createEntityManager();   
    //em.getTransaction().begin();
    
    //City mCity = new City ();
    //mCity.setAreaname(areaname); 
    //mCity.setHumidity(humidity);
    //mCity.setTempC(temp_C);
    //mCity.setWindspeedkmph(windspeedKmph);
    //em.persist(mCity);
    //em.getTransaction().commit();
    
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("WeatherAppPU");
    EntityManager em = emf.createEntityManager();
    CityJpaController controller = new CityJpaController(emf);
    City mCity = new City();

    int selectedRow = jTable2.getSelectedRow();
    if (selectedRow != -1) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String areaName = model.getValueAt(selectedRow, 0).toString();
        //System.out.println("areaName"+areaName);
        String temp_C = model.getValueAt(selectedRow, 1).toString();
        //System.out.println("tempC"+temp_C);
        String humidity = model.getValueAt(selectedRow, 2).toString();
        String windspeedKmph = model.getValueAt(selectedRow, 3).toString();
        String uvIndex = model.getValueAt(selectedRow, 4).toString();
        String weatherDesc = model.getValueAt(selectedRow, 5).toString();

        mCity.setAreaname(areaName); 
        mCity.setHumidity(humidity);
        mCity.setTempC(temp_C);
        mCity.setWindspeedkmph(windspeedKmph);
        mCity.setUvindex(uvIndex);
        mCity.setWeatherdesc(weatherDesc);
        
        try {
            controller.create(mCity);
            JOptionPane.showMessageDialog(null, "City weather data saved successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error saving city weather data: " + e.getMessage());
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(null, "No city selected. Please select a city from the table.");
    }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Assuming direct editing in jTable2 is enabled
    int selectedRow = jTable2.getSelectedRow();
    if (selectedRow != -1) {
        jTable2.editCellAt(selectedRow, 0); // Start editing at column 0
        jTable2.requestFocus();
    } else {
        JOptionPane.showMessageDialog(null, "Please select a cell to edit.");
    }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // Button Διαγράφη
    // Entity Manager
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("WeatherAppPU");
    int selectedRow = jTable2.getSelectedRow();
    if (selectedRow != -1) {
        String cityName = (String) jTable2.getModel().getValueAt(selectedRow, 0);

        int option = JOptionPane.showConfirmDialog(null, 
                "Are you sure you want to delete the city " + cityName + " from the database?",
                "Delete Data", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            EntityManager em = emf.createEntityManager();
            try {
                em.getTransaction().begin();
                Query query = em.createNamedQuery("City.findByAreaname");
                query.setParameter("areaname", cityName);
                List<City> cities = query.getResultList();

                if (!cities.isEmpty()) {
                    CityJpaController controller = new CityJpaController(emf);
                    for (City city : cities) {
                        controller.destroy(city.getAreaname()); 
                    }
                }
                em.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "The city " + cityName + 
                        " has been successfully deleted from the database", "Data Deleted",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                JOptionPane.showMessageDialog(null, "Error during deletion: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } finally {
                if (em.isOpen()) {
                    em.close();
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
    }
   

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CityResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CityResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CityResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CityResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
            //public void run() {
                //new CityResults().setVisible(true);
            //}
        //});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
